class Solution {
    List<List<Integer>> list = new ArrayList<>();
    List<Integer> sublist =  new ArrayList<>();

    public List<List<Integer>> permuteUnique(int[] nums) { 
        //inital the arraylist, 123
        for(int i = 0; i< nums.length; i++){
            sublist.add(nums[i]);
        }
        backtrack(nums, 0, new boolean[nums.length]);
        return list;
    }

    private void backtrack(int[] nums, int index, boolean[] boolnums){
        if(index == nums.length) {
            list.add(new ArrayList<>(sublist));
            return;
        }
        for(int i = index; i < nums.length; i++){ 
            //fix the index . 3 levels, then deal with the rest
               if( !boolnums[i]){

                   if(i>0 && boolnums[i-1] == boolnums[i] && boolnums[i-1]){
                      continue; 
                   }
                    swap(index, i);
                    backtrack(nums, index+1,boolnums);
                    swap(index, i);
                    boolnums[i] = false;
                }
         }
     }

    private void swap( int m ,int n){
        int temp = sublist.get(m);
        sublist.set(m,sublist.get(n));
        sublist.set(n, temp);
    }
}
